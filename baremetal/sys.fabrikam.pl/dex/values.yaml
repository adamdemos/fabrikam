nameOverride: dex # this needs to match the k8s-app label selector in the affinity section below

# We need to pass AD domain Certification Authority certificate so DEX can use secure LDAPS to connect to AD LDAP server
volumes:
- name: ad-ca
  secret:
    secretName: active-directory-ca
volumeMounts:
- name: ad-ca
  readOnly: true
  mountPath: /certs

ingress:
  enabled: true
  className: sys-fab-pl-ing-ctrl # use specific Ingress Controller
  annotations:
    cert-manager.io/cluster-issuer: "sys-fabrikam-pl-letsencrypt-prod" # use production cert issuer for sys.fabrikam.pl
    external-dns: sys.fabrikam.pl  # use external dns for sys.fabrikam.pl
  tls:
  - hosts:
    - dex.sys.fabrikam.pl
    secretName: dex.sys.fabrikam.pl # this will be the name of created certificate 
  hosts:
  - host: dex.sys.fabrikam.pl
    paths:
    - pathType: ImplementationSpecific
      path: /

# for HA, specify 2 replicas and use anti-affinity to prevent both pods being scheduled on the same node
replicaCount: 2
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchLabels:
          k8s-app: dex # We can't use variables in values file (Helm limitation) so we need to hardcode it and make sure it matches the app label. See nameOverride parameter above
      topologyKey: "kubernetes.io/hostname"

# This is only needed if using secure way to pass AD user password using kubernetes secret and environment variable
envVars:
- name: BINDPW
  valueFrom:
    secretKeyRef:
      name: ldap-reader-password
      key: BINDPW

config:
  # This URL has to match ingress config above
  issuer: https://dex.sys.fabrikam.pl
  oauth2:
    # Skip additional "approve grant access" scren after user is authenticated
    skipApprovalScreen: true

# Configure DEX to run inside Kubernetes and use Kubernetes CRD as storage
  storage:
    type: kubernetes
    config: 
      inCluster: true

  connectors:
  - type: ldap
    id: ldap
    name: ldap
    config:
      # Secure LDAPS
      host: fab-dc01.fabrikam.pl:636
      rootCA: /certs/ad-ca.crt
      insecureNoSSL: false
      insecureSkipVerify: false
      # for plain LDAP
      #host: fab-dc01-fabrikam.pl:389
      #insecureNoSSL: true
      #insecureSkipVerify: true

      # AD user and password used to read AD. Should be low-priviledged user.
      bindDN: CN=LDAP reader,ou=Service accounts,ou=Fabrikam,dc=fabrikam,dc=pl
      # Password can be specified directly here.
      # A better way is to specify environment variable that will hold this password with syntax: ${variable_name}
      # Then store password as kubernetes secret and map secret to that ENV variable
      bindPW: ${BINDPW}

      # Config for user search
      userSearch:
        # Start search in this OU
        baseDN: ou=Users,ou=Fabrikam,dc=fabrikam,dc=pl
        # filter for users accounty objects
        filter: "(objectClass=person)"
        # username attribute used for comparing user entries. This will be translated and combined with the other filter as "(<attr>=<username>)"
        username: sAMAccountName
        # The following three fields are direct mappings of attributes on the user entry. String representation of the user.
        idAttr: sAMAccountName
        # Required. Attribute to map to Email.
        emailAttr: userPrincipalName
        # Maps to display name of users. No default value.
        nameAttr: displayName

        # Config for group search
        groupSearch:
          # Start search in this OU
          baseDN: ou=Groups,ou=Fabrikam,dc=fabrikam,dc=pl
          # filter for group objects
          filter: "(objectClass=group)"
          # Following two fields are used to match a user to a group.
          # They add an additional requirement to the filter that an attribute in the group must match the user's attribute value.
          userAttr: distinguishedName
          groupAttr: member
          nameAttr: cn
  
  staticClients:
  - id: kubernetes
    redirectURIs:
    # this one is for kubelogim plugin to kubectl
    - http://localhost:8000
    # this one is for Kubernetes Dashboard
    - https://dashboard.sys.fabrikam.pl/oauth2/callback
    name: 'Kubernetes'
    secret: ZXhhbXBsZS1hcHAtc2VjcmV0
  