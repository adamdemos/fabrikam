# Vault Helm Chart Value Overrides
global:
  enabled: true
  tlsDisable: false

injector:
  enabled: true
  # Use the Vault K8s Image https://github.com/hashicorp/vault-k8s/
  image:
    repository: "hashicorp/vault-k8s"
    tag: "latest"

  resources:
      requests:
        memory: 100Mi
        cpu: 250m
      limits:
        memory: 256Mi
        cpu: 250m

server:
  image:
    repository: "hashicorp/vault"
    tag: "latest"

  # These Resource Limits are in line with node requirements in the Vault Reference Architecture for a Small Cluster
  resources:
    requests:
      memory: 100Mi
      cpu: 250m
    limits:
      memory: 2Gi
      cpu: 2000m

  # For HA configuration and because we need to manually init the vault,
  # we need to define custom readiness/liveness Probe settings
  readinessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
  livenessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true"
    initialDelaySeconds: 60

  # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
  # used to include variables required for auto-unseal.
  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-ca-cert/tls.crt

  # extraVolumes is a list of extra volumes to mount. These will be exposed
  # to Vault in the path `/vault/userconfig/<name>/`.
  extraVolumes:
    - type: secret
      name: vault-cert
    - type: secret
      name: vault-ca-cert
#    - type: secret
#      name: kms-creds
  
  # This configures the Vault Statefulset to create a PVC for audit logs.
  # See https://www.vaultproject.io/docs/audit/index.html to know more
  auditStorage:
    enabled: true

  standalone:
    enabled: false

  dataStorage:
    enabled: true
    size: 500Mi

  # Run Vault in "HA" mode.
  ha:
    enabled: true
    replicas: 3
    raft:
      enabled: true
      setNodeId: true

      config: |
        ui = true
        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_cert_file = "/vault/userconfig/vault-cert/tls.crt"
          tls_key_file = "/vault/userconfig/vault-cert/tls.key"
          tls_ca_cert_file = "/vault/userconfig/vault-ca-cert/tls.crt"
        }

        storage "raft" {
          path = "/vault/data"
            retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-cert/tls.crt"
            leader_client_cert_file = "/vault/userconfig/vault-cert/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-cert/tls.key"
          }
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-cert/tls.crt"
            leader_client_cert_file = "/vault/userconfig/vault-cert/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-cert/tls.key"
          }
          retry_join {
            leader_api_addr = "https://vault-2.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ca-cert/tls.crt"
            leader_client_cert_file = "/vault/userconfig/vault-cert/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-cert/tls.key"
          }

          autopilot {
            cleanup_dead_servers = "true"
            last_contact_threshold = "200ms"
            last_contact_failure_threshold = "10m"
            max_trailing_logs = 250000
            min_quorum = 3
            server_stabilization_time = "10s"
          }

        }

        seal "azurekeyvault" {
          tenant_id       = "9116b818-f66e-46c4-be6b-79d931b8286b"
          client_id       = "d9fa058c-c349-444d-8337-79565c050862"
          client_secret   = "AAxZ64DoZBep__-_zDChgBztR3eZ1v7VrY"
          vault_name      = "UnsealKeyVault"
          key_name        = "K1UnsealKey"
          subscription_id = "dd54c00a-ece0-443a-b1fd-e149c305dd8d"
        }

        service_registration "kubernetes" {}

# Vault UI
ui:
  enabled: true
  serviceType: "LoadBalancer"
  serviceNodePort: null
  externalPort: 8200

  # For Added Security, edit the below
  #loadBalancerSourceRanges:
  #   - < Your IP RANGE Ex. 10.0.0.0/16 >
  #   - < YOUR SINGLE IP Ex. 1.78.23.3/32 >